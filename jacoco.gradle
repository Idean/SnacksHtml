apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.6'
}

tasks.withType(Test) {
    ignoreFailures = true
    // Whether or not classes without source location should be instrumented
    jacoco.includeNoLocationClasses true
    jacoco.excludes = ['jdk.internal.*']
    maxHeapSize = '4g'
}

private static boolean isAndroidModule(Project project) {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}

afterEvaluate { project ->
    if (isAndroidModule(project)) setupAndroidReporting()
    else setupKotlinReporting()
}

def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn test
        reports {
            csv.enabled false // change if needed
            xml {
                enabled true
                destination file("${buildDir}/coverage-report/report.xml")
            }
            html {
                enabled true
                destination file("${buildDir}/coverage-report/html")
            }
        }
    }
}

def setupAndroidReporting() {
    task jacocoTestReport(
            type: JacocoReport,
            dependsOn: ['testDebugUnitTest']
    ) {
        dependsOn test
        reports {
            csv.enabled false
            xml {
                enabled true
                destination file("${buildDir}/coverage-report/report.xml")
            }
            html {
                enabled true
                destination file("${buildDir}/coverage-report/html")
            }
        }
        // Change as needed
        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

        def jacocoIncludes = [
                '**/com/idean/**'
        ]
        def debugTree = fileTree(
                dir:  "$buildDir/intermediates/javac/debug/classes",
                includes: jacocoIncludes,
                excludes: fileFilter
        ) + fileTree(
                dir: "$buildDir/tmp/kotlin-classes/debug",
                includes: jacocoIncludes,
                excludes: fileFilter
        )
        def mainSrc = "$projectDir/src/main/kotlin"
        sourceDirectories.setFrom(files([mainSrc]))

        classDirectories.setFrom(files([debugTree]))
        executionData.setFrom(files("$project.buildDir/jacoco/testDebugUnitTest.exec"))
    }
}